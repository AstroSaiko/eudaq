GET_FILENAME_COMPONENT(OBJNAME ${CMAKE_CURRENT_LIST_DIR} NAME)
AUX_SOURCE_DIRECTORY(. OBJECT_SRC)
SOURCE_GROUP(${OBJNAME} FILES ${OBJECT_SRC})

LIST(REMOVE_ITEM OBJECT_SRC ./GenericConverterPlugin.cc)

FIND_PACKAGE(ROOT)
IF(ROOT_FOUND)
  INCLUDE_DIRECTORIES( ${ROOT_INCLUDE_DIR} )
  SET(ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}  ${ROOT_LIBRARIES})
  ADD_DEFINITIONS(-DROOT_FOUND)
ENDIF(ROOT_FOUND)


OPTION(USE_TINYXML "Compiling main library using TinyXML" OFF)
IF(USE_TINYXML OR BUILD_palpidefs)
  FIND_PACKAGE( TINYXML REQUIRED )
  IF(TINYXML_FOUND)
    INCLUDE_DIRECTORIES( ${TINYXML_INCLUDE_DIRS} )
    SET(ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES} ${TINYXML_LIBRARIES} )
    ADD_DEFINITIONS(-DUSE_TINYXML)
    MESSAGE("Compiling main library using TinyXML")
  ENDIF(TINYXML_FOUND)
ENDIF(USE_TINYXML OR BUILD_palpidefs)

FIND_PACKAGE(PXAR)
IF(PXARCORE_FOUND)
  INCLUDE_DIRECTORIES(${PXARCORE_INCLUDE_DIRS})
  SET(ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}  ${PXARCORE_LIBRARIES})
ELSE(PXARCORE_FOUND)
  MESSAGE(STATUS "NOT building converter plugin for CMSPixel.")
  LIST(REMOVE_ITEM OBJECT_SRC ./CMSPixelConverterPlugin.cc)
  LIST(REMOVE_ITEM OBJECT_SRC ./CMSPixelTRPConverterPlugin.cc)
  LIST(REMOVE_ITEM OBJECT_SRC ./CMSPixelQUADConverterPlugin.cc)
  LIST(REMOVE_ITEM OBJECT_SRC ./CMSPixelREFConverterPlugin.cc)
  LIST(REMOVE_ITEM OBJECT_SRC ./CMSPixelDUTConverterPlugin.cc)
ENDIF(PXARCORE_FOUND)

IF(PROTOBUF_FOUND AND GEN_proto)
  FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/pb_gen )
  ADD_CUSTOM_TARGET(
    GEN_PROTO ${PROTOBUF_PROTOC_EXECUTABLE} --proto_path=${PROJECT_SOURCE_DIR}/main/include/eudaq --cpp_out=${CMAKE_BINARY_DIR}/pb_gen --python_out=${PROJECT_SOURCE_DIR}/python ${PROJECT_SOURCE_DIR}/main/include/eudaq/StandardEvent.proto
    #COMMAND mv ${PROJECT_SOURCE_DIR}/main/lib/plugins/StandardEvent.pb.h ${PROJECT_SOURCE_DIR}/main/include/eudaq
    #COMMAND sed -i 's/StandardEvent.pb.h/eudaq\\/StandardEvent.pb.h/g' ${PROJECT_SOURCE_DIR}/main/lib/plugins/StandardEvent.pb.cc
    )
  LIST(APPEND OBJECT_SRC ./GenericConverterPlugin.cc)    
  LIST(APPEND OBJECT_SRC ${CMAKE_BINARY_DIR}/pb_gen/StandardEvent.pb.cc)    
  SET_SOURCE_FILES_PROPERTIES(${CMAKE_BINARY_DIR}/pb_gen/StandardEvent.pb.cc PROPERTIES GENERATED TRUE)
  INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/pb_gen)
ENDIF()

IF(PROTOBUF_FOUND AND GEN_proto)
  ADD_DEPENDENCIES(${PROJECT_NAME} GEN_PROTO)   
ENDIF()

ADD_LIBRARY(${OBJNAME} OBJECT ${OBJECT_SRC})


